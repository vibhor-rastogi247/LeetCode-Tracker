{
  "Product_of_Array_Except_Self": {
    "done": true,
    "tags": "array, Prefix multiplication",
    "comments": "",
    "solution": "\nclass Solution {\npublic:\n    vector<int> productExceptSelf(vector<int>& nums) {\n        \n          int res = 1;\n            int zeroCount = 0;\n           int n = nums.size();\n           \n        for ( int x : nums)\n        {\n            if(x == 0)\n            {\n                zeroCount++;\n            }\n             res *= (x == 0 ? 1 : x);\n             cout<<res<<\" \";\n        }\n           \n   \n        for (  int i = 0; i < n ; i++)\n        {\n            if(zeroCount != n  )\n            {\n            if(zeroCount > 0 )\n            {\n                if(zeroCount == 1)\n                {\n                    \n                    nums[i] = nums[i] == 0 ? res : 0;\n                }else\n                {\n                    nums[i] = 0;\n                }\n            }else\n            {\n                 nums[i] = res/nums[i];\n            }\n        }else{\n            nums[i] = 0;\n        }\n        }\n               \n            \n        return nums;\n    }\n};",
    "revisit": false
  },
  "Set_Matrix_Zeroes": {
    "done": true,
    "tags": "array, Matrix manipulation (in-place)",
    "comments": "// we can copy vectors by value with = means deep copy\n\n",
    "solution": "class Solution {\npublic:\n    void setZeroes(vector<vector<int>>& m) {\n         int r = m.size();\n        int c = m[0].size();\n        vector<vector<int>> temp = m;\n        for(int i = 0 ; i <r; i++)\n        {\n            for(int j =0 ; j < c; j++)\n            {\n                if(temp[i][j]==0)\n                setToZero(m,i,j);\n            }\n        }\n        \n    }\n    void setToZero(vector<vector<int>> &arr, int i, int j)\n    { \n        \n        int r = arr.size();\n        int c = arr[0].size();\n        for(int k = 0 ; k < r ; k++)\n        {\n            arr[k][j] =0;\n        }\n        for(int k = 0 ; k < c ; k++)\n        {\n            arr[i][k] =0;\n        }\n    }\n\n\n};",
    "revisit": false
  },
  "Spiral_Matrix": {
    "comments": "//recursion question \nafter one circle its the same problem",
    "done": false,
    "solution": "",
    "tags": "array, Matrix traversal simulation",
    "revisit": true
  },
  "Longest_Palindromic_Substring": {
    "comments": "//can be solved with mancher algo",
    "tags": "strings, Expand around center",
    "done": false,
    "revisit": true
  },
  "Group_Anagrams": {
    "tags": "Hash Map, Categorize by sorted string",
    "done": true,
    "comments": "//sort takes iterators and is call by reference",
    "solution": "#include<bits/stdc++.h>\nclass Solution {\npublic:\n    vector<vector<string>> groupAnagrams(vector<string>& strs) {\n        \n        unordered_map<string,vector<string>> hm;\n        vector<vector<string>> res;\n        for(auto x : strs)\n        {\n            \n            string key = x;\n            sort(key.begin(), key.end());\n            if((hm.count(key)) != 0 ) \n            {\n                hm[key].push_back(x);\n            }else{\n                 vector<string> temp;\n                 temp.push_back(x);\n                 hm[key] = temp;\n            }\n        }\n\n        for(auto x : hm)\n        {\n            res.push_back(x.second);\n        }\n        return res;\n    }\n};"
  },
  "Longest_Consecutive_Sequence": {
    "tags": "HashSet, Sequence ordering",
    "done": true,
    "comments": "",
    "solution": "class Solution {\npublic:\n    int longestConsecutive(vector<int>& nums) {\n        \n        int maxi = 1;\n        int curr = 1;\n        int n = nums.size();\n        if(n ==0 )\n        return 0;\n        sort(nums.begin(),nums.end());\n        for(int i = 0 ; i < n ; i++ )\n        {\n            curr = 1;\n           \n            while((i + 1 < n) && ((nums[i] == nums[i+1]) || (nums[i]+1 == nums[i+1])))\n            {\n               if(nums[i]+1 == nums[i+1])\n                curr += 1;\n                i++;\n            }\n          \n            maxi = max(maxi,curr);\n        }\n        return maxi;\n    }\n};"
  },
  "Rotate_Image": {
    "tags": "array, Matrix rotation",
    "done": false,
    "comments": "4. Rotate 90 Degrees Clockwise\nTranspose → then flip horizontally.\n\nKnown as Rotate Right.\n\n5. Rotate 90 Degrees Counterclockwise\nTranspose → then flip vertically.\n\nKnown as Rotate Left.\n\n6. Rotate 180 Degrees\nFlip both vertically and horizontally.\n\nOR flip upside down and then left to right.",
    "solution": "",
    "revisit": true
  },
  "Container_With_Most_Water": {
    "tags": "array, Two pointers",
    "done": true,
    "comments": "//simple greedy also\nALWAYS MOVE SMALL VALUE POINTER",
    "solution": "class Solution {\npublic:\n    int maxArea(vector<int>& h) {\n\n        int current = 0;\n        int max = 0;\n        int n = h.size();\n        for (int i = 0, j = n - 1; i < j;) {\n            current = h[i] > h[j] ? h[j] * (j - i) : h[i] * (j - i);\n            max = max < current ? current : max;\n            if (h[i] > h[j])\n                j--;\n            else\n                i++;\n        }\n        return max;\n    }\n};"
  },
  "House_Robber": {
    "tags": "Dynamic Programming, Maximum sum",
    "done": false,
    "comments": "",
    "solution": ""
  },
  "House_Robber_II": {
    "tags": "Dynamic Programming, Circular array",
    "done": false,
    "comments": "",
    "solution": ""
  },
  "Decode_Ways": {
    "tags": "Dynamic Programming, String decoding",
    "done": false,
    "comments": "",
    "solution": ""
  },
  "Graph_Valid_Tree": {
    "tags": "Graph, Union-Find",
    "done": false,
    "comments": "",
    "solution": ""
  },
  "Redundant_Connection": {
    "tags": "Graph, Union-Find",
    "done": false,
    "comments": "",
    "solution": ""
  },
  "N_Queens": {
    "tags": "Backtracking, Recursion",
    "done": false,
    "comments": "",
    "solution": ""
  },
  "Sudoku_Solver": {
    "tags": "Backtracking, Constraint satisfaction",
    "done": false,
    "comments": "",
    "solution": ""
  },
  "Flatten_Binary_Tree_to_Linked_List": {
    "tags": "Binary Tree, Preorder traversal",
    "done": false,
    "comments": "",
    "solution": ""
  },
  "Kth_Smallest_Element_in_a_BST": {
    "tags": "Binary Search Tree, Inorder traversal",
    "done": false,
    "comments": "",
    "solution": ""
  },
  "Two_Sum": {
    "tags": "Hash Map, Pair sum",
    "done": false,
    "comments": "",
    "solution": "",
    "revisit": false
  },
  "Valid_Anagram": {
    "tags": "Hash Map, String sorting",
    "done": false,
    "comments": "",
    "solution": "",
    "revisit": false
  },
  "4Sum_II": {
    "tags": "Hash Map, Two-sum pairs for 4-sum",
    "done": true,
    "comments": "//same as 2 sum or 3 sum",
    "solution": "class Solution {\npublic:\n    int fourSumCount(vector<int>& nums1, vector<int>& nums2, vector<int>& nums3, vector<int>& nums4) {\n        vector<int> s1;\n        unordered_map<int,int> s2;\n        int n =  nums2.size();\n        \n\n        for(int i = 0 ; i < n; i++ )\n        {\n            for(int j = 0; j < n ; j++ )\n            {\n                s1.push_back(nums1[i] + nums2[j]);\n\n                if(s2.count(nums3[i] + nums4[j]) == 0)\n                {\n                    s2[nums3[i] + nums4[j]] = 1;\n                }else\n                {\n                    s2[nums3[i] + nums4[j]] += 1;\n                }\n            }\n        }\n        int m = s1.size();\n        int z = 0;\n        for(int i = 0 ; i < m; i++ )\n        {\n            int key = -s1[i];\n            if(s2.count(key)>0)\n            {\n                z  +=  s2[key];\n            }\n        }\n        return z;\n    }\n};"
  },
  "Longest_Substring_Without_Repeating_Characters": {
    "tags": "Sliding window, Two pointers + set/map",
    "done": true,
    "comments": "//easy question\njust remove from set when shrinking window",
    "solution": "class Solution {\npublic:\n    int lengthOfLongestSubstring(string arr) {\n        unordered_set<char> s;\n        int n = arr.size();\n        int curr = 0;\n        int maxi = 0;\n\n        for(int i = 0, j =0; j < n ; j++)\n        {\n            if(s.count(arr[j]) > 0)\n            {\n                while(arr[i] != arr[j])\n                {\n                    s.erase(arr[i]);\n                    i++;\n                    curr--;\n                }\n                 s.insert(arr[j]);\n                i++;\n            }else\n            {\n                s.insert(arr[j]);\n               \n                curr++;\n            }\n           \n            maxi = max(maxi,curr);\n\n        }\n        return maxi;\n    }\n};"
  },
  "Minimum_Window_Substring": {
    "tags": "Sliding window, Two pointers + frequency count",
    "done": true,
    "comments": "//Very tricky\nHARD PROBLEM REVIST ",
    "solution": "class Solution {\npublic:\n    string minWindow(string s, string t) {\n\n        int n = s.size();\n        int m = t.size();\n        unordered_map<char, int> f;\n        unordered_map<char, int> o;\n        unordered_set<char> u;\n        string sol = \"\";\n        int l = -1, r = -1;\n        int mini = INT_MAX;\n\n        if (n < t.size())\n            return sol;\n\n        if (n == 1) {\n            if (s[0] == t[0])\n                return s;\n            return sol;\n        }\n        for (auto x : t) {\n            if (o.count(x) > 0) {\n                o[x] += 1;\n            } else {\n                o[x] = 1;\n                f[x] = 0;\n                u.insert(x);\n            }\n        }\n\n        int required = o.size();\n        int formed = 0;\n\n        int j = 0;\n        for (int i = 0; i <= n - m; i++) {\n            bool solFound = false;\n            while ((! (solFound = (formed == required))) && j < n) {\n                if (u.count(s[j]) > 0) {\n                    f[s[j]] += 1;\n                    if (f[s[j]] == o[s[j]]) {\n                        formed += 1;\n                    }\n                }\n                j++;\n            }\n\n            while (formed == required && i < j) {\n                if (u.count(s[i]) > 0) {\n                    break;\n                }\n                i++;\n            }\n\n            if (solFound) {\n                if ((mini > (j - i + 1))) {\n                    l = i;\n                    r = j;\n                    mini = j - i + 1;\n                }\n\n                if (u.count(s[i]) > 0) {\n                    if (f[s[i]] == o[s[i]]) {\n                        formed -= 1;\n                    }\n                    f[s[i]] -= 1;\n                }\n            } else {\n                if (l != -1)\n                    sol = getss(s, l, r);\n                return sol;\n            }\n        }\n        if (l != -1)\n            sol = getss(s, l, r);\n        return sol;\n    }\n\n    string getss(string s, int i, int j) {\n        string r = \"\";\n        for (; i < j; i++) {\n            r += s[i];\n        }\n        return r;\n    }\n};",
    "revisit": true
  },
  "Find_All_Anagrams_in_a_String": {
    "tags": "Sliding window, Anagram frequency match",
    "done": true,
    "comments": "use fill insted of memset\nmemset(ss,0,sizeof(ss));",
    "solution": "class Solution {\npublic:\n    vector<int> findAnagrams(string s, string p) {\n        \n         vector<int> ret;\n        int n = s.size();\n        int m = p.size();\n\n        if(m>n)\n        return ret;\n\n        if(m==n)\n        {\n            sort(s.begin(),s.end()); \n             sort(p.begin(),p.end());\n            if(s==p)\n                {\n                    ret.push_back(0);\n                    return ret;\n                }\n                else\n                {\n                    return ret;\n                }\n        }\n            \n        int ss[256];\n        fill(begin(ss), end(ss), 0); \n        int ps[256];\n        fill(begin(ps), end(ps), 0); \n        unordered_set<char> pset;\n\n         \n       \n\n        for(auto x : p)\n        {\n            pset.insert(x);\n            ps[x] += 1;\n          \n        }\n        \n        for(int i = 0 ; i < m-1 ;i++)\n        {\n              ss[s[i]] +=1;\n        }\n\n        for(int i = 0, j= m-1 ; i < n-m +1; i++,j++ )\n        {\n            ss[s[j]] += 1;\n            if(check(pset,ss,ps))\n            {\n                ret.push_back(i);\n            }\n            ss[s[i]] -= 1;\n\n        }\n         return ret;\n    }\n\n    bool check(unordered_set<char>& pset,int* ss, int* ps )\n    {\n        for( auto x : pset)\n        {\n            if(ss[x] != ps[x])\n                return false; \n        }\n        return true;\n\n    }\n\n\n};"
  },
  "Sliding_Window_Maximum": {
    "tags": "Deque, Monotonic queue for window max",
    "done": true,
    "comments": "//Good for practicing loop ranges",
    "solution": "class Solution {\npublic:\n    vector<int> maxSlidingWindow(vector<int>& nums, int k) {\n\n        int n = nums.size();\n        int currMax = 0;\n        vector<int> res;\n        map<int,int> m;\n         if(1 == n)\n         {\n            res.push_back(nums[0]);\n         return res;\n         }\n\n        for(int i = 0 ; i< k ; i++)\n        {\n            if(!m.count(nums[i]))\n            {\n                m[nums[i]] = 1;\n            }else\n            {\n                m[nums[i]] += 1;\n            }\n\n        }\n\n        for(int i = 0,j = k  ; i < n - k + 1 ; i++,j++)\n        {\n            \n           res.push_back(m.rbegin()->first);\n        \n            if(m[nums[i]] == 1)\n            {\n                m.erase(nums[i]);\n            }else\n            {\n                m[nums[i]] -= 1;\n            }\n\n            if(j < n)\n            if(!m.count(nums[j]))\n            {\n                m[nums[j]] = 1;\n            }else\n            {\n                m[nums[j]] += 1;\n            }\n\n\n\n        }\n        return res;\n\n    }\n};",
    "revisit": true
  },
  "3Sum": {
    "tags": "Two pointers, After sorting",
    "done": true,
    "comments": "",
    "solution": "// same as 4 sum "
  },
  "Trapping_Rain_Water": {
    "tags": "Two pointers, Water trapping calculation",
    "done": true,
    "comments": "",
    "solution": "class Solution {\npublic:\n    int trap(vector<int>& height) {\n        \n        int l = height[0];\n        int r = height[height.size()-1];\n        int lp =0;\n        int rp = height.size()-1;\n        int tappedWater = 0;\n        while(rp>lp)\n        {\n            int hl = height[lp];\n            int hr = height[rp];\n            if(hl<hr)\n            {\n                tappedWater += l-hl;\n                lp++;\n                l = max(l,height[lp]);\n            }\n            else\n            {\n                 tappedWater += r-hr;\n                 rp--;\n                 r =  max(r,height[rp]);\n            }\n\n        }\n        return tappedWater;\n    }\n};"
  },
  "Sort_Colors": {
    "tags": "Two pointers, Dutch national flag sort",
    "done": true,
    "comments": "//3 pointer inplace sort",
    "solution": "class Solution {\npublic:\n    void sortColors(vector<int>& arr) {\n        int n = arr.size();\n        int low = 0, mid = 0, high = n - 1;\n\n        while (mid <= high) {\n            if (arr[mid] == 0) {\n                swap(arr[low], arr[mid]);\n                low++;\n                mid++;\n            }\n            else if (arr[mid] == 1) {\n                mid++;\n            }\n            else { // arr[mid] == 2\n                swap(arr[mid], arr[high]);\n                high--;\n            }\n        }\n    }\n};"
  },
  "Subarray_Sum_Equals_K": {
    "tags": "Prefix sum, Hash Map",
    "done": false,
    "comments": "",
    "solution": "----\nTODO\n----",
    "revisit": true
  },
  "Contiguous_Array": {
    "tags": "Prefix sum, Hash (equal 0/1 counts)",
    "done": false,
    "comments": "",
    "solution": ""
  },
  "Minimum_Size_Subarray_Sum": {
    "tags": "Two pointers, Sliding window sum",
    "done": false,
    "comments": "",
    "solution": ""
  },
  "Daily_Temperatures": {
    "tags": "Monotonic stack, Next warmer day",
    "done": false,
    "comments": "",
    "solution": ""
  },
  "Next_Greater_Element_II": {
    "tags": "Monotonic stack, Circular array",
    "done": false,
    "comments": "",
    "solution": ""
  },
  "Asteroid_Collision": {
    "tags": "Stack simulation, Collision",
    "done": false,
    "comments": "",
    "solution": ""
  },
  "Largest_Rectangle_in_Histogram": {
    "tags": "Monotonic stack, Max rectangle in histogram",
    "done": false,
    "comments": "",
    "solution": ""
  },
  "Add_Two_Numbers": {
    "tags": "Linked list, Simulate addition",
    "done": false,
    "comments": "",
    "solution": ""
  },
  "Remove_Nth_Node_From_End_of_List": {
    "tags": "Linked list, Two-pointer removal",
    "done": false,
    "comments": "",
    "solution": ""
  },
  "Merge_K_Sorted_Lists": {
    "tags": "Linked list + Heap, Merge lists",
    "done": false,
    "comments": "",
    "solution": ""
  },
  "LRU_Cache": {
    "tags": "Design, Doubly-linked list + HashMap",
    "done": false,
    "comments": "",
    "solution": ""
  },
  "Koko_Eating_Bananas": {
    "tags": "Binary search on answer, Min eating speed",
    "done": false,
    "comments": "",
    "solution": ""
  },
  "Capacity_To_Ship_Packages_Within_D_Days": {
    "tags": "Binary search on answer, Min ship capacity",
    "done": false,
    "comments": "",
    "solution": ""
  },
  "Split_Array_Largest_Sum": {
    "tags": "Binary search on answer, Minimize largest subarray sum",
    "done": false,
    "comments": "",
    "solution": ""
  },
  "Find_the_Duplicate_Number": {
    "tags": "Binary search on range, Cycle detection",
    "done": false,
    "comments": "",
    "solution": ""
  },
  "Jump_Game": {
    "tags": "Greedy, Track farthest reachable index",
    "done": false,
    "comments": "",
    "solution": ""
  },
  "Gas_Station": {
    "tags": "Greedy, Circular tour problem",
    "done": false,
    "comments": "",
    "solution": ""
  },
  "Merge_Intervals": {
    "tags": "Intervals, Sort then merge overlapping",
    "done": false,
    "comments": "",
    "solution": ""
  },
  "Non_overlapping_Intervals": {
    "tags": "Greedy, Interval scheduling (remove overlaps)",
    "done": false,
    "comments": "",
    "solution": ""
  },
  "Kth_Largest_Element_in_an_Array": {
    "tags": "Heap / Quickselect, Find k-th largest",
    "done": false,
    "comments": "",
    "solution": ""
  },
  "Top_K_Frequent_Elements": {
    "tags": "Heap or Bucket sort, Top K frequency",
    "done": false,
    "comments": "",
    "solution": ""
  },
  "Find_Median_from_Data_Stream": {
    "tags": "Two Heaps, Maintain median",
    "done": false,
    "comments": "",
    "solution": ""
  },
  "Meeting_Rooms_II": {
    "tags": "Min-heap, Min number of rooms needed",
    "done": false,
    "comments": "",
    "solution": ""
  },
  "Implement_Trie": {
    "tags": "Trie, Prefix tree implementation",
    "done": false,
    "comments": "",
    "solution": ""
  },
  "Add_and_Search_Word": {
    "tags": "Trie / DFS, Word dictionary with wildcard",
    "done": false,
    "comments": "",
    "solution": ""
  },
  "Word_Search_II": {
    "tags": "Trie + Backtracking, Find all words in board",
    "done": false,
    "comments": "",
    "solution": ""
  },
  "Replace_Words": {
    "tags": "Trie, Replace prefixes in sentence",
    "done": false,
    "comments": "",
    "solution": ""
  },
  "Number_of_Islands": {
    "solution": "class Solution {\npublic:\n    int numIslands(vector<vector<char>>& grid) {\n        \n        unordered_map<string,bool> visisted;\n        stack<pair<int,int>> ones;\n        int res = 0;\n        int rows = grid.size();\n        int columns = grid[0].size();\n        for(int i = 0 ; i<rows ; i++)\n         for(int j = 0 ; j< columns ; j++)\n         {\n           string key = to_string(i) + \"-\" + to_string(j);\n            visisted[key] = false;\n            if(grid[i][j]=='1')\n            {\n                ones.push({i,j});\n            }\n         }\n\n         while(!ones.empty())\n         {\n            \n            stack<pair<int,int>> temp;\n            auto s = ones.top();\n            ones.pop();\n            string key = to_string(s.first) + \"-\" + to_string(s.second);\n\n            if(!visisted[key])\n            {\n                temp.push({s.first,s.second});\n                while(!temp.empty())\n                {\n                    auto k = temp.top();\n                    temp.pop();\n                   string key = to_string(k.first) + \"-\" + to_string(k.second);\n                   if(!visisted[key])\n                   {\n                    visisted[key] = true;\n                    \n                    //get all 4 valid negihbor\n                    if(k.first < rows - 1)\n                    {\n                        int p = k.first+1;\n                        int q = k.second;\n                        if(grid[p][q]=='1')\n                        {\n                             string key = to_string(p) + \"-\" + to_string(q);\n                             if(!visisted[key])\n                             {\n                                temp.push({p,q});\n                             }\n                        }\n                       \n\n                    }\n                    if(k.first >= 1 )\n                    {\n                        int p = k.first-1;\n                        int q = k.second;\n                         if(grid[p][q]=='1')\n                        {\n                             string key = to_string(p) + \"-\" + to_string(q);\n                             if(!visisted[key])\n                             {\n                                temp.push({p,q});\n                             }\n                        }\n                    }\n                     if(k.second < columns - 1)\n                    {\n                        int p = k.first;\n                        int q = k.second+1;\n                         if(grid[p][q]=='1')\n                        {\n                             string key = to_string(p) + \"-\" + to_string(q);\n                             if(!visisted[key])\n                             {\n                                temp.push({p,q});\n                             }\n                        }\n                    }\n                    if(k.second >= 1 )\n                    {\n                        int p = k.first;\n                        int q = k.second-1;\n                         if(grid[p][q]=='1')\n                        {\n                             string key = to_string(p) + \"-\" + to_string(q);\n                             if(!visisted[key])\n                             {\n                                temp.push({p,q});\n                             }\n                        }\n                    }\n\n                    //push them to temp stack only if not visited and \"1\"\n\n\n                   }\n                  \n\n                }\n                res++;\n            }\n            \n         }\n    return res;\n    }\n};",
    "comments": "//tricky but straight forward\nalso cant add no to string directly.\nstring key = to_string(s.first) + \"-\" + to_string(s.second);\n",
    "done": true
  }
}